package {{ .packageName }}

// Do not manually change this file, as it is generated.
// If you want to update the file, run `mage update`

import (
        {{ range $key := .packages }}
        "{{ $key }}"
        {{ end }}
        "go.uber.org/zap"
        "go.uber.org/zap/zapcore"
)

var Field struct{
{{ range $ns := .schema.Top }}
    // {{ $ns.Name | goName }} provides fields in the ECS {{ $ns.FlatName }} namespace.
    {{ if $ns.Description -}}{{ $ns.Description | goComment }}{{ end -}}
    {{ $ns.Name | goName }} {{ $ns.FlatName | goName }}
{{ end }}
}

type (
{{ range $ns := .schema.Namespaces }}
    {{ $ns.FlatName | goName }} struct {
      {{ range $sub := $ns.Children }}
        {{ $sub.Description | goComment }}
        {{ $sub.Name | goName }} {{ $sub.FlatName | goName }}
      {{ end }}
  }
{{ end }}
)

{{ range $value := .schema.Base }}
{{ if ne $value.Type.Constructor "Any" }}
// {{ $value.Name | goName }} create the ECS compliant '{{ $value.FlatName}}' field.
{{ $value.Description | goComment }}
func {{ $value.Name | goName }}(value {{ $value.Type.Name }}) zapcore.Field {
    return {{ $value.Type.Constructor }}("{{ $value.FlatName }}", value)
}
{{ else }}
// {{ $value.Name | goName }} create the ECS compliant '{{ $value.FlatName}}' field.
{{ $value.Description | goComment }}
func {{ $value.Name | goName }}(value map[string]string) zapcore.Field {
    return MapStr("{{ $value.FlatName }}", value)
}
{{ end }}
{{ end }}


{{ range $ns := .schema.Namespaces }}
// ## {{ $ns.FlatName }} fields
{{ range $value := $ns.Values }}
{{/* Filter out generic object types that would accept a map[string]interface */}}
{{ if ne $value.Type.Constructor "Any" }}
// {{ $value.Name | goName }} create the ECS compliant '{{ $value.FlatName}}' field.
{{ $value.Description | goComment }}
func ({{ $ns.FlatName | goName }}) {{ $value.Name | goName }}(value {{ $value.Type.Name }}) zapcore.Field {
    return {{ $value.Type.Constructor }}("{{ $value.FlatName }}", value)
}
{{ end }}
{{ end }}
{{ end }}


func Time(key string, val time.Time) zapcore.Field    { return zap.Time(key, val) }
func String(key string, val string) zapcore.Field     { return zap.String(key, val) }
func Strings(key string, val []string) zapcore.Field  { return zap.Strings(key, val) }
func Bool(key string, val bool) zapcore.Field         { return zap.Bool(key, val) }
func Int(key string, val int) zapcore.Field           { return zap.Int(key, val) }
func Int64(key string, val int64) zapcore.Field       { return zap.Int64(key, val) }
func Float64(key string, val float64) zapcore.Field   { return zap.Float64(key, val) }
func MapStr(key string, val map[string]string) zapcore.Field {
	return zapcore.Field{
		Key:       key,
		Type:      zapcore.ObjectMarshalerType,
		Interface: mapStr(val),
	}
}

type mapStr map[string]string

func (m mapStr) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	for k, v := range m {
		enc.AddString(k, v)
	}
	return nil
}
